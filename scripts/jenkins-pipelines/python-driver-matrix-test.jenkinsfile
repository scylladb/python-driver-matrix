#!groovy
// Pipeline python-driver-matrix-test
// In order to debug, set RELENG_BRANCH on Jenkins job with value of the debug branch.
// example: refs/heads/build-pipeline-into-scm

Map modules = [:]
pipeline {
	parameters {
		//Mandatory:
		string(name: 'NODE_X86', defaultValue: 'ec2-fleet-x86', description: 'On which node to run. Useful options: gce-qavpc,gce2-qavpc,gce4-qavpc. packager machines are slower, but could be used:loki,dgccd201,thor,ran,sif,huginn,muninn')
		//Have defaults:
		string(name: 'SCYLLA_VERSIONS', defaultValue: '2', description: 'Scylla versions to check. If the value is a number - The newest major tag versions on which the tests will run (example: 3.25.1, 3.25.0, 3.24.8, and 3.24.7 - the versions chosen were 3.25.1 and 3.24.8) otherwise, the user needs to write the versions as a string with a comma (example:"3.25.1,3.24.1,3.24.3" or "3.25.1")')
		string(name: 'DATASTAX_VERSIONS', defaultValue: '2', description: 'Datastax versions to check.  If the value is a number - The newest major tag versions on which the tests will run (example: 3.25.1, 3.25.0, 3.24.8, and 3.24.7 - the versions chosen were 3.25.1 and 3.24.8) otherwise, the user needs to write the versions as a string with a comma (example:"3.25.1,3.24.1,3.24.3" or "3.25.1")')
		string(name: 'PROTOCOLS', defaultValue: '3,4', description: 'CQL binary protocols v3, v4. i.e. 3,4')
		string(name: 'MAPPED_SCYLLA_VERSION', defaultValue: '3.1', description: '')
		string(name: 'ARTIFACT_SOURCE_JOB_NAME', defaultValue: '', description: 'Build path to take artifacts from (usually next or build). Use this with ARTIFACT_SOURCE_BUILD_NUM to get reloc from jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_SOURCE_BUILD_NUM', defaultValue: '', description: 'Build number to take artifacts from. Leave empty to use last available build. Use with ARTIFACT_SOURCE_JOB_NAME to take artifacts from Jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_WEB_URL', defaultValue: 'latest', description: 'URL to take reloc items from. Use when reloc is not available on jenkins, or when running on AWS, which will download faster from S3.')
		string(name: 'SCYLLA_CCM_BRANCH', defaultValue: '', description: 'git branch or sha for CCM. i.e. branch-3.1, master or a sha')
		string(name: 'SCT_BRANCH', defaultValue: '', description: 'git branch or sha for SCT. i.e. branch-3.1. master or a sha')
		// The adding_docker_image is temp, till Israel's PR is approved.
		string(name: 'PYTHON_DRIVER_MATRIX_REPO', defaultValue: '', description: 'git repo of Scylla python-driver-matrix')
		string(name: 'PYTHON_DRIVER_MATRIX_BRANCH', defaultValue: '', description: 'git branch or sha for Python driver matrix. i.e. branch-3.1. master or a sha')
		string(name: 'SCYLLA_PYTHON_DRIVER_REPO', defaultValue: 'https://github.com/scylladb/python-driver.git', description: 'git repo of Scylla python-driver')
		string(name: 'SCYLLA_PYTHON_BRANCH', defaultValue: 'master', description: 'Branch of Scylla python-driver repo')
		string(name: 'DATASTAX_PYTHON_DRIVER_REPO', defaultValue: 'https://github.com/datastax/python-driver.git', description: 'git repo of Datastax python-driver')
		string(name: 'DATASTAX_PYTHON_BRANCH', defaultValue: 'master', description: 'Branch of Datastax python-driver repo')
		string(name: 'EMAIL_ADDRESS', defaultValue: 'qa@scylladb.com', description: 'The email address to send the report. If empty - will take qa@scylladb.com')
		booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Set to test the pipeline code')
		booleanParam(name: 'DEBUG_MAIL', defaultValue: false, description: 'Set to send mails to requester only')
	}
	agent {
		label {
			label env.NODE_X86
		}
	}

	environment {
		AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
		AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
	}

	options {
		disableConcurrentBuilds()
		timeout(time: 10, unit: 'HOURS')
		buildDiscarder(
			logRotator(
				numToKeepStr: '10',
				daysToKeepStr: env.JOB_NAME.contains("releng-testing") ? '14': ''
			)
		)
	}

	stages {

		stage ('Prepare') {
			steps {
				script {
					mappedScyllaVersion = params.MAPPED_SCYLLA_VERSION
					environment {
						MAPPED_SCYLLA_VERSION = "$mappedScyllaVersion"
					}
					branchProperties = readProperties interpolate: true, file: 'scripts/jenkins-pipelines/branch-specific.properties'
					generalProperties = readProperties interpolate: true, file: 'scripts/jenkins-pipelines/general.properties'
					artifact = load "${generalProperties.groovyPath}/artifact.groovy"
					general = load "${generalProperties.groovyPath}/general.groovy"
					aws = load "${generalProperties.groovyPath}/aws.groovy"
					git = load "${generalProperties.groovyPath}/git.groovy"
					test = load "${generalProperties.groovyPath}/test.groovy"
					mail = load "${generalProperties.groovyPath}/mail.groovy"
					git.createGitProperties()
					gitProperties = readProperties file: generalProperties.gitPropertiesFileName
					echo "========= Git properties file: ==============="
					sh "cat ${generalProperties.gitPropertiesFileName}"
					echo "=============================================="

					artifactSourceJob = params.ARTIFACT_SOURCE_JOB_NAME ?: "${branchProperties.calledBuildsDir}${branchProperties.buildJobName}"
					buildMode = "release"
					pythonDriverDatastaxCheckoutDir = "python-driver-datastax"
					pythonDriverScyllaCheckoutDir = "python-driver-scylla"
					artifactSourceJobNum = params.ARTIFACT_SOURCE_BUILD_NUM ?: Jenkins.instance.getItemByFullName(artifactSourceJob).lastSuccessfulBuild.number.toString()
					paramArtifactWebUrl = params.ARTIFACT_WEB_URL ?: "latest"
					cloudUrl = artifact.getLastSuccessfulUrl (
						artifactWebUrl: paramArtifactWebUrl,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						fieldName: "reloc-pack-url:"
					)
					scyllaVersion = artifact.fetchMetadataValue (
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						cloudUrl: cloudUrl,
						fieldName: "scylla-version:",
					)
					scyllaRelease = artifact.fetchMetadataValue (
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						cloudUrl: cloudUrl,
						fieldName: "scylla-release:",
					)
				}
			}
		}

		stage('Checkout') {
			steps {
				script {
					ccmBranch = params.SCYLLA_CCM_BRANCH ?: branchProperties.stableQABranchName
					pythonDriverMatrixRepoUrl = params.PYTHON_DRIVER_MATRIX_REPO ?: generalProperties.pythonDriverMatrixRepoUrl
					pythonDriverMatrixBranch = params.PYTHON_DRIVER_MATRIX_BRANCH ?: branchProperties.stableDriverMatrixBranchName

					git.cleanWorkSpaceUponRequest()
                    git.checkoutToDir (gitProperties.scyllaPkgRepoUrl, branchProperties.stableBranchName, gitProperties.scyllaPkgCheckoutDir)
					git.checkoutToDir (pythonDriverMatrixRepoUrl, pythonDriverMatrixBranch, gitProperties.pythonDriverMatrixCheckoutDir)
					git.checkoutToDir (gitProperties.scyllaCcmRepoUrl, ccmBranch, gitProperties.scyllaCcmCheckoutDir)
					git.checkoutToDir (params.DATASTAX_PYTHON_DRIVER_REPO, params.DATASTAX_PYTHON_BRANCH, pythonDriverDatastaxCheckoutDir)
					git.checkoutToDir (params.SCYLLA_PYTHON_DRIVER_REPO, params.SCYLLA_PYTHON_BRANCH, pythonDriverScyllaCheckoutDir)
					general.lsPath(WORKSPACE)
				}
			}
		}

		stage('Copy Artifacts') {
			steps {
				script {
					artifact.getRelocArtifacts (
						buildMode: buildMode,
						cloudUrl: cloudUrl,
						architecture: generalProperties.x86ArchName,
					)
				}
			}
		}

		stage('Python Driver Matrix Test(datastax)') {
			steps {
				catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
					script {
						test.doPythonDriverMatrixTest(
							dryRun: params.DRY_RUN,
							pythonDriverScyllaOrDatastaxCheckoutDir: "$WORKSPACE/$pythonDriverDatastaxCheckoutDir",
							pythonDriverMatrixCheckoutDir: "$WORKSPACE/$gitProperties.pythonDriverMatrixCheckoutDir",
							driverType: "datastax",
							pythonDriverVersions: params.DATASTAX_VERSIONS,
							cqlBinaryProtocols: params.PROTOCOLS,
							architecture: generalProperties.x86ArchName,
							email_recipients: params.EMAIL_ADDRESS,
							scyllaVersion: scyllaVersion,
							scyllaRelease: scyllaRelease,
						)
					}
				}
			}
		}
		stage('Python Driver Matrix Test(scylla)') {
			steps {
				catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
					script {
						test.doPythonDriverMatrixTest(
							dryRun: params.DRY_RUN,
							pythonDriverScyllaOrDatastaxCheckoutDir: "$WORKSPACE/$pythonDriverScyllaCheckoutDir",
							pythonDriverMatrixCheckoutDir: "$WORKSPACE/$gitProperties.pythonDriverMatrixCheckoutDir",
							driverType: "scylla",
							pythonDriverVersions: params.SCYLLA_VERSIONS,
							cqlBinaryProtocols: params.PROTOCOLS,
							architecture: generalProperties.x86ArchName,
							email_recipients: params.EMAIL_ADDRESS,
							scyllaVersion: scyllaVersion,
							scyllaRelease: scyllaRelease,
						)
					}
				}
			}
		}
	}

	post {
		//Order is: always, changed, fixed, regression, aborted, failure, success, unstable, and cleanup.
		always {
			script {
				if (binding.hasVariable('initPipelineDone')) {
					if (! params.DRY_RUN) {
						publishStatus = artifact.publishArtifactsStatus("**/*.xml", "$WORKSPACE/${generalProperties.pythonDriverMatrixCheckoutDir}")
						boolean needToPublish = true
						publishStatus |= test.publishTestResults(needToPublish, "**/*.xml", "junit", "$WORKSPACE/${generalProperties.pythonDriverMatrixCheckoutDir}")
						if (publishStatus) {
							echo "Error: Could not publish some item(s)."
							logText += "\nCould not publish some item(s). See log for details"
							if (currentBuild.currentResult != "ABORTED") {
								currentBuild.result = 'FAILURE'
							}
						}
					}
					mail.mailIfError("$devAddress", "${currentBuild.currentResult}: $jobTitle", "${currentBuild.currentResult}: ${jobTitle}: $logText")
				} else if (!(JOB_NAME.contains("releng-testing") || params.DRY_RUN || params.DEBUG_MAIL)) {
					mail (
						to: params.EMAIL_ADDRESS,
						subject: "${currentBuild.currentResult}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
						body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] ${currentBuild.currentResult} at the very beginning. Please see Jenkins logs for details"
					)
					cleanWs()
				} else {
					cleanWs()
				}
			}
		}

		fixed {
			script {
				mail.mailFixed("$devAddress", "Fixed ${currentBuild.currentResult}: $jobTitle", "Fixed ${currentBuild.currentResult}: ${jobTitle}: $logText")
			}
		}

		cleanup {
			script {
				git.cleanWorkSpaceUponRequest()
			}
		}
	}
}
